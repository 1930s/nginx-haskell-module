# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        2;

events {
    worker_connections  1024;
}

http {
    default_type        application/octet-stream;
    sendfile            on;

    #haskell load /var/lib/nginx/test_tools.so;

    haskell compile threaded modular /tmp/ngx_haskell_test_tools.hs '

{-# LANGUAGE TemplateHaskell, DeriveGeneric #-}

module TestTools where

import           NgxExport
import           NgxExport.Tools

import           Data.ByteString (ByteString)
import qualified Data.ByteString.Lazy as L
import qualified Data.ByteString.Lazy.Char8 as C8L
import           Data.Aeson
import           GHC.Generics

test :: ByteString -> Bool -> IO L.ByteString
test = const . return . L.fromStrict
ngxExportSimpleService \'test $
    PersistentService $ Just $ Sec 10

testRead :: (Read a, Show a) => a -> Bool -> IO L.ByteString
testRead = const . return . C8L.pack . show

testReadInt :: Int -> Bool -> IO L.ByteString
testReadInt = testRead
ngxExportSimpleServiceTyped \'testReadInt \'\'Int $
    PersistentService $ Just $ Sec 10

newtype Conf = Conf Int deriving (Read, Show)

testReadConf :: Conf -> Bool -> IO L.ByteString
testReadConf = testRead
ngxExportSimpleServiceTyped \'testReadConf \'\'Conf $
    PersistentService $ Just $ Sec 10

testReadJSON :: (FromJSON a, Show a) => a -> Bool -> IO L.ByteString
testReadJSON = const . return . C8L.pack . show

data ConfJSON = ConfJSONCon1 Int
              | ConfJSONCon2 deriving (Generic, Show)
instance FromJSON ConfJSON

testReadConfJSON :: ConfJSON -> Bool -> IO L.ByteString
testReadConfJSON = testReadJSON
ngxExportSimpleServiceTypedAsJSON \'testReadConfJSON \'\'ConfJSON
    SingleShotService

testReadIntHandler :: ByteString -> L.ByteString
testReadIntHandler = C8L.pack . show .
    (readFromByteString :: ByteString -> Maybe Int)
ngxExportYY \'testReadIntHandler

testReadConfHandler :: ByteString -> L.ByteString
testReadConfHandler = C8L.pack . show .
    (readFromByteString :: ByteString -> Maybe Conf)
ngxExportYY \'testReadConfHandler

testReadConfJSONHandler :: ByteString -> L.ByteString
testReadConfJSONHandler = C8L.pack . show .
    (readFromByteStringAsJSON :: ByteString -> Maybe ConfJSON)
ngxExportYY \'testReadConfJSONHandler

    ';

    haskell_run_service simpleService_test
            $hs_test
            test;

    haskell_run_service simpleService_testReadInt
            $hs_testReadInt
            5000000;

    haskell_run_service simpleService_testReadConf
            $hs_testReadConf
            'Conf 20';

    haskell_run_service simpleService_testReadConfJSON
            $hs_testReadConfJSON
            '{"tag":"ConfJSONCon1", "contents":56}';

    haskell_service_var_ignore_empty $hs_testReadConfJSON;

    server {
        listen       8010;
        server_name  main;
        error_log    /tmp/nginx-test-haskell-error.log;
        access_log   /tmp/nginx-test-haskell-access.log;

        location / {
            echo    "Service variables:";
            echo    "  hs_test: $hs_test";
            echo    "  hs_testReadInt: $hs_testReadInt";
            echo    "  hs_testReadConf: $hs_testReadConf";
            echo    "  hs_testReadConfJSON: $hs_testReadConfJSON";

            haskell_run testReadIntHandler $hs_testReadIntHandler
                    -456;
            haskell_run testReadConfHandler $hs_testReadConfHandler
                    'Conf 21';
            haskell_run testReadConfJSONHandler $hs_testReadConfJSONHandler
                    '{"tag":"ConfJSONCon2"}';
            haskell_run testReadConfJSONHandler
                    $hs_testReadConfJSONHandlerBadInput
                    '{"tag":"Unknown"}';

            echo    "Handler variables:";
            echo    "  hs_testReadIntHandler: $hs_testReadIntHandler";
            echo    "  hs_testReadConfHandler: $hs_testReadConfHandler";
            echo    "  hs_testReadConfJSONHandler: $hs_testReadConfJSONHandler";
            echo -n "  hs_testReadConfJSONHandlerBadInput: ";
            echo    $hs_testReadConfJSONHandlerBadInput;
        }
    }
}

# vim: ft=nginx
