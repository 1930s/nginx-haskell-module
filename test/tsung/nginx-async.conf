# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        2;

events {
    worker_connections  1024;
}

http {
    default_type        application/octet-stream;
    sendfile            on;

    #haskell compile threaded standalone /tmp/ngx_haskell.hs '

#import qualified Data.ByteString.Char8 as C8
#import qualified Data.ByteString.Lazy.Char8 as C8L
#import           Network.HTTP.Client
#import           Control.Concurrent
#import           Control.Exception
#import           Safe

#getUrl url = do
    #man <- newManager defaultManagerSettings
    #fmap responseBody (parseRequest (C8.unpack url) >>= flip httpLbs man)
        #`catch` \e -> return $ C8L.pack $
        #"HTTP EXCEPTION: " ++ show (e :: HttpException)
#NGX_EXPORT_ASYNC_IOY_Y (getUrl)

#delay x = threadDelay ((1000000 *) v) >> return (C8L.pack $ show v)
    #where v = readDef 0 $ C8.unpack x
#NGX_EXPORT_ASYNC_IOY_Y (delay)

    #';

    haskell compile threaded /tmp/ngx_haskell.hs '

module NgxHaskellUserRuntime where

import           NgxExport
import qualified Data.ByteString.Char8 as C8
import qualified Data.ByteString.Lazy.Char8 as C8L
import           Network.HTTP.Client
import           Control.Concurrent
import           Control.Exception
import           Safe

getUrl url = do
    man <- newManager defaultManagerSettings
    fmap responseBody (parseRequest (C8.unpack url) >>= flip httpLbs man)
        `catch` \e -> return $ C8L.pack $
        "HTTP EXCEPTION: " ++ show (e :: HttpException)
ngxExportAsyncIOYY \'getUrl

delay x = threadDelay ((1000000 *) v) >> return (C8L.pack $ show v)
    where v = readDef 0 $ C8.unpack x
ngxExportAsyncIOYY \'delay

    ';

    server {
        listen       8010;
        server_name  main;
        error_log    /tmp/nginx-test-haskell-error.log;
        access_log   /tmp/nginx-test-haskell-access.log;

        location / {
            haskell_run_async getUrl $hs_async_ya
                    "http://ya.ru";
            haskell_run_async getUrl $hs_async_httpbin
                    "http://httpbin.org";
            haskell_run_async getUrl $hs_async_hackage
                    "http://hackage.haskell.org";
            echo -n "------> YA.RU:\n\n$hs_async_ya\n\n";
            echo -n "------> HTTPBIN.ORG:\n\n$hs_async_httpbin\n\n";
            echo    "------> HACKAGE.HASKELL.ORG:\n\n$hs_async_hackage";
        }

        location /rewrite {
            #echo "HERE";
            rewrite ^ / last;
        }

        location /delay {
            haskell_run_async delay $hs_async_elapsed $arg_a;
            echo "Elapsed $hs_async_elapsed seconds";
        }

        location /async {
            haskell_run_async getUrl $hs_async_test "http://localhost:8020/";
            echo -n $hs_async_test;
        }
    }

    server {
        listen       8020;
        server_name  backend;

        location / {
            echo "Hello main!";
        }
    }
}

# vim: ft=nginx
