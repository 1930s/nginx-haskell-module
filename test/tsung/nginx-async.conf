# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        2;

events {
    worker_connections  1024;
}

http {
    default_type        application/octet-stream;
    sendfile            on;

    #haskell compile threaded standalone /tmp/ngx_haskell.hs '

#import qualified Data.ByteString.Char8 as C8
#import qualified Data.ByteString.Lazy.Char8 as C8L
#import           Network.HTTP.Client
#import           Control.Concurrent
#import qualified Control.Concurrent.MSem as S
#import           Control.Exception
#import           Control.Monad
#import           System.IO.Unsafe
#import           Safe

#catchHttpException = (`catch` \e ->
        #return $ C8L.pack $ "HTTP EXCEPTION: " ++ show (e :: HttpException))

#getResponse (C8.unpack -> url) = fmap responseBody . (parseRequest url >>=)

#httpManager = unsafePerformIO $ newManager defaultManagerSettings
#{-# NOINLINE httpManager #-}

#getUrl url = catchHttpException $ getResponse url $ flip httpLbs httpManager
#NGX_EXPORT_ASYNC_IOY_Y (getUrl)

#sem1 = unsafePerformIO $ S.new 1
#{-# NOINLINE sem1 #-}

#getUrl1 url = do
    #man <- newManager defaultManagerSettings
    #catchHttpException $ getResponse url $ S.with sem1 . flip httpLbs man
#NGX_EXPORT_ASYNC_IOY_Y (getUrl1)

#threadDelaySec = threadDelay . (* 10^6)

#delay (readDef 0 . C8.unpack -> v) =
    #threadDelaySec v >> return (C8L.pack $ show v)
#NGX_EXPORT_ASYNC_IOY_Y (delay)

#delay1 (readDef 0 . C8.unpack -> v) =
    #S.with sem1 (threadDelaySec v) >> return (C8L.pack $ show v)
#NGX_EXPORT_ASYNC_IOY_Y (delay1)

#getUrlService url firstRun = do
    #unless firstRun $ threadDelaySec 20
    #getUrl url
#NGX_EXPORT_SERVICE_IOY_Y (getUrlService)

    #';

    haskell compile threaded /tmp/ngx_haskell.hs '

{-# LANGUAGE ViewPatterns #-}
    
module NgxHaskellUserRuntime where

import           NgxExport
import qualified Data.ByteString.Char8 as C8
import qualified Data.ByteString.Lazy.Char8 as C8L
import           Network.HTTP.Client
import           Control.Concurrent
import qualified Control.Concurrent.MSem as S
import           Control.Exception
import           Control.Monad
import           System.IO.Unsafe
import           Safe

catchHttpException = (`catch` \e ->
        return $ C8L.pack $ "HTTP EXCEPTION: " ++ show (e :: HttpException))

getResponse (C8.unpack -> url) = fmap responseBody . (parseRequest url >>=)

httpManager = unsafePerformIO $ newManager defaultManagerSettings
{-# NOINLINE httpManager #-}

getUrl url = catchHttpException $ getResponse url $ flip httpLbs httpManager
ngxExportAsyncIOYY \'getUrl

sem1 = unsafePerformIO $ S.new 1
{-# NOINLINE sem1 #-}

getUrl1 url = do
    man <- newManager defaultManagerSettings
    catchHttpException $ getResponse url $ S.with sem1 . flip httpLbs man
ngxExportAsyncIOYY \'getUrl1

threadDelaySec = threadDelay . (* 10^6)

delay (readDef 0 . C8.unpack -> v) =
    threadDelaySec v >> return (C8L.pack $ show v)
ngxExportAsyncIOYY \'delay

delay1 (readDef 0 . C8.unpack -> v) =
    S.with sem1 (threadDelaySec v) >> return (C8L.pack $ show v)
ngxExportAsyncIOYY \'delay1

getUrlService url firstRun = do
    unless firstRun $ threadDelaySec 20
    getUrl url
ngxExportServiceIOYY \'getUrlService

    ';

    haskell_run_service getUrlService $hs_service_ya "http://ya.ru";
    haskell_run_service getUrlService $hs_service_httpbin "http://httpbin.org";

    server {
        listen       8010;
        server_name  main;
        error_log    /tmp/nginx-test-haskell-error.log;
        access_log   /tmp/nginx-test-haskell-access.log;

        location / {
            haskell_run_async getUrl $hs_async_ya
                    "http://ya.ru";
            haskell_run_async getUrl $hs_async_httpbin
                    "http://httpbin.org";
            haskell_run_async getUrl $hs_async_hackage
                    "http://hackage.haskell.org";
            echo "------> YA.RU:\n\n$hs_async_ya\n";
            echo "------> HTTPBIN.ORG:\n\n$hs_async_httpbin\n";
            echo "------> HACKAGE.HASKELL.ORG:\n\n$hs_async_hackage";
        }

        location /rewrite {
            #echo "HERE";
            rewrite ^ / last;
        }

        location /delay {
            haskell_run_async delay $hs_async_elapsed $arg_a;
            echo "Elapsed $hs_async_elapsed seconds";
        }

        location /async {
            haskell_run_async getUrl $hs_async_test "http://localhost:8020/";
            echo -n $hs_async_test;
        }

        location /ya {
            echo $hs_service_ya;
        }

        location /httpbin {
            echo $hs_service_httpbin;
        }

        location /1 {
            haskell_run_async getUrl1 $hs_async_ya
                    "http://ya.ru";
            haskell_run_async getUrl1 $hs_async_httpbin
                    "http://httpbin.org";
            haskell_run_async getUrl1 $hs_async_hackage
                    "http://hackage.haskell.org";
            echo "------> YA.RU:\n\n$hs_async_ya\n";
            echo "------> HTTPBIN.ORG:\n\n$hs_async_httpbin\n";
            echo "------> HACKAGE.HASKELL.ORG:\n\n$hs_async_hackage";
        }

        location /delay1 {
            haskell_run_async delay1 $hs_async_elapsed $arg_a;
            echo "Elapsed $hs_async_elapsed seconds";
        }
    }

    server {
        listen       8020;
        server_name  backend;

        location / {
            echo "Hello main!";
        }
    }
}

# vim: ft=nginx
