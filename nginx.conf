# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        2;

events {
    worker_connections  1024;
}

http {
    default_type        application/octet-stream;
    sendfile            on;

    haskell ghc_extra_flags '-hide-package regex-pcre -XFlexibleInstances';

    haskell compile /tmp/ngx_haskell.hs '

import qualified Data.Char as C
import           Text.Regex.PCRE
import           Safe
import           Data.Function (on)
import           Data.Aeson
import           Data.Maybe
import           Data.ByteString (ByteString)
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.ByteString.Char8 as C8

toUpper = map C.toUpper
NGX_EXPORT_S_S (toUpper)

takeN = take . readDef 0
NGX_EXPORT_S_SS (takeN)

NGX_EXPORT_S_S (reverse)

matches a b = not $ null (getAllTextMatches $ on (=~) urlDecode a b :: [String])
NGX_EXPORT_B_SS (matches)

firstNotEmpty = headDef "" . filter (not . null)
NGX_EXPORT_S_LS (firstNotEmpty)

isInList [] = False
isInList (x : xs) = x `elem` xs
NGX_EXPORT_B_LS (isInList)

isJSONListOfInts x = isJust
    (decodeStrict $ fromMaybe B.empty $ doURLDecode x :: Maybe [Int])
NGX_EXPORT_B_Y (isJSONListOfInts)

jSONListOfIntsTakeN x = BL.toStrict $ encode $ take n $ fromMaybe []
    (decodeStrict $ fromMaybe B.empty $ doURLDecode y :: Maybe [Int])
    where (readDef 0 . C8.unpack -> n, B.tail -> y) = B.break (== 124) x
NGX_EXPORT_Y_Y (jSONListOfIntsTakeN)

class UrlDecodable a
    where doURLDecode :: a -> Maybe a

instance UrlDecodable String where
    -- adopted from
    -- http://www.rosettacode.org/wiki/URL_decoding#Haskell
    doURLDecode [] = Just []
    doURLDecode (\'%\' : xs) =
        case xs of
            (a : b : xss) -> doURLDecode xss >>=
                return . ((C.chr . read $ "0x" ++ [a, b]) :)
            _ -> Nothing
    doURLDecode (\'+\' : xs) = doURLDecode xs >>= return . (\' \' :)
    doURLDecode (x:xs) = doURLDecode xs >>= return . (x :)

instance UrlDecodable ByteString where
    -- adopted for ByteString arguments from
    -- http://www.rosettacode.org/wiki/URL_decoding#Haskell
    doURLDecode (B.null -> True) = Just B.empty
    doURLDecode (B.uncons -> Just (37, xs))
        | B.length xs > 1 = doURLDecode (B.drop 2 xs) >>=
             return . ((readDef 0 $ "0x" ++ C8.unpack (B.take 2 xs)) `B.cons`)
        | otherwise = Nothing
    doURLDecode (B.uncons -> Just (43, xs)) =
        doURLDecode xs >>= return . (32 `B.cons`)
    doURLDecode (B.uncons -> Just (x, xs)) =
        doURLDecode xs >>= return . (x `B.cons`)

urlDecode = fromMaybe "" . doURLDecode
NGX_EXPORT_S_S (urlDecode)

    ';

    server {
        listen       8010;
        server_name  main;
        error_log    /tmp/nginx-test-haskell-error.log;
        access_log   /tmp/nginx-test-haskell-access.log;

        location / {
            haskell_run toUpper $hs_a $arg_a;
            echo "toUpper ($arg_a) = $hs_a";
            if ($arg_b) {
                haskell_run takeN $hs_a $arg_b $arg_a;
                echo "takeN ($arg_a, $arg_b) = $hs_a";
                break;
            }
            if ($arg_c) {
                haskell_run reverse $hs_a $arg_c;
                echo "reverse ($arg_c) = $hs_a";
                break;
            }
            if ($arg_d) {
                haskell_run matches $hs_a $arg_d $arg_a;
                haskell_run urlDecode $hs_b $arg_a;
                echo "matches ($arg_d, $hs_b) = $hs_a";
                break;
            }
            if ($arg_e) {
                haskell_run firstNotEmpty $hs_a $arg_f $arg_g $arg_a;
                echo "firstNotEmpty ($arg_f, $arg_g, $arg_a) = $hs_a";
                break;
            }
            if ($arg_l) {
                haskell_run isInList $hs_a $arg_a secret1 secret2 secret3;
                echo "isInList ($arg_a, <secret words>) = $hs_a";
                break;
            }
            if ($arg_m) {
                haskell_run isJSONListOfInts $hs_a $arg_m;
                haskell_run urlDecode $hs_b $arg_m;
                echo "isJSONListOfInts ($hs_b) = $hs_a";
                break;
            }
            if ($arg_n) {
                haskell_run jSONListOfIntsTakeN $hs_a $arg_take|$arg_n;
                haskell_run urlDecode $hs_b $arg_n;
                echo "jSONListOfIntsTakeN ($hs_b, $arg_take) = $hs_a";
                break;
            }
        }
    }
}

# vim: ft=nginx
